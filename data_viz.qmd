---
title: "Data Visualization"
author: "R Trainer: Binod Jung Bogati (linkedin.com/in/bjungbogati)"
copyright: "© 2025. Unauthorized distribution or reuse prohibited."
format: html
editor: visual
---

# Data Visualization

## Load

```{r}
library(tidyverse)

load(url("http://bit.ly/4eZIXte"))
```

## Layers

### Data

```{r}
head(cars)
```

### Layer 2

```{r}
ggplot(cars) +
  geom_point(aes(x = speed, y = dist)) +
  geom_line(aes(x = speed, y = dist))
```

## Aesthetic Mapping

### About

-   A visual property of the objects in your plot i.e size, shape, color etc.

-   Components of X-axis and Y-axis are defined in aesthetics.

### Data

```{r}
head(cars)
```

### List

![](https://www.sthda.com/sthda/RDoc/images/points-symbols.png){width="147"}

### Opacity

```{r}
ggplot(data = cars) +
  geom_point(
    mapping = aes(x = speed, y = dist),
    color = "blue",
    size = 8,
    shape = 3,
    alpha = 0.4
  )
```

### Revisit

| Property      | Description                         |
|---------------|-------------------------------------|
| aes(x =, y =) | set variables for x-axis and y-axis |
| color =       | set color of points                 |
| shape =       | set shape of points                 |
| size =        | size of points                      |
| alpha =       | opacity of points                   |

## Your Turn 01

Create a scatter plot between `Height` and `weight` of the subjects from vital signs (`vs`) dataset.

```{r}
names(vs) # run this to see column names
```

```{r}
ggplot(data = ..., 
       mapping = aes(x = ...., y = ....)) + 
      ....


```

## Mapping Aesthetics to Variables

### Data

```{r}
head(blood)
```

## Shape and Color

```{r}
ggplot(data = blood) +
  geom_point(
    mapping =
      aes(
        x = SITEID, y = COUNT,
        color = TYPES,
        shape = SEX
      ),
    size = 8
  )
```

## Geometric Objects

### About

-   A geom is the geometrical object that a plot uses to represent data.

-   geom_point is the geometrical object that plots scatter plot to represent data.

### Types

| Type       | Function                   |
|------------|----------------------------|
| Point      | `geom_point()`             |
| Line       | `geom_line()`              |
| Bar        | `geom_bar()`, `geom_col()` |
| Histogram  | `geom_histogram()`         |
| Regression | `geom_smooth()`            |
| Box plot   | `geom_boxplot()`           |
| Count      | `geom_count()`             |
| Density    | `geom_density()`           |

## Combine plots

### Data

```{r}
head(blood)
```

### Scatter plot and Line plot

```{r}
ggplot(
  data = blood, 
  mapping = aes(x = SITEID, y = COUNT)
) +
  geom_point(color = "red") +
  geom_line(color="blue")
```

## Geom Properties

### Data

```{r}
head(blood)
```

### Shape and Linetype

```{r}
ggplot(data = blood, 
      mapping = aes(x = SITEID, y = COUNT)) +
  geom_point(shape=5) +
  geom_line(
    linetype="dashed"
  ) 
```

## Your Turn 02

-   Create the line plot between average `HR` over `VISITNUM` using `vs` dataset.
-   Use `group_by` to group the records by `VISITNUM`.
-   Then `summarise` the data to find the average of the records and use the data to plot the line plot using above example code

```{r}

vs_ex2 <-  vs  |>  
  group_by(......) |> 
  summarise(result = mean(......))

ggplot(vs_ex2, aes(x = ... , y = result, group = 1)) +
  geom_line()

```

## Statistical Transformation

### About

-   The algorithm used to calculate new values for a graph is called a stat, short for statistical transformation.

-   In other graphs such as scatter plot, line plot, smooth-line, new values are not computed.

-   In graphs like bar plot, box plots, histograms etc, new values are computed such as counts, proportions, summary etc.

### Data

```{r}
head(diamonds)
```

### Plot 1

```{r}
ggplot(data = diamonds)+
  geom_bar(mapping = aes(x=cut))
```

### Plot 2

```{r}
ggplot(data = diamonds)+
  geom_bar(mapping = aes(y=cut))
```

## Attributes in Bar plot

### Data

```{r}
head(diamonds)
```

### Color

```{r}
ggplot(data = diamonds) +
  geom_bar(mapping = aes(
    x = cut,
    color = cut
  ))
```

### Fill

```{r}
ggplot(data = diamonds) +
  geom_bar(mapping = aes(
    x = cut,
    fill = cut
  ))
```

### Position

| Position | Description                                      |
|----------|--------------------------------------------------|
| stack    | The objects are stacked one on top of the other. |
| dodge    | The objects are placed adjacent to each other.   |

### Data

```{r}

head(demo)

```

### Stack

```{r}
ggplot(data = demo)+
  geom_bar(mapping = aes(x=TRT, fill=RACE),
           position = "stack")
```

### Dodge

```{r}
ggplot(data = demo)+
  geom_bar(mapping = aes(x=TRT, fill=RACE),
           position = "dodge")
```

## Your Turn 03

Using the dataset `dm`, create a stacked bar chart that visualizes:

-   X-axis: RACE (showing different racial groups)
-   Fill color: SEX (showing gender distribution within each race)
-   Position: Stacked bars

```{r}

ggplot(data = ...) +
  geom_bar(aes(................),  
           position = ".....") 

```

## Themes

| Themes | Description: |
|-------------------------|-----------------------------------------------|
| theme_classic() | A classic-looking theme, with x and y axis lines and no gridlines. |
| theme_minimal() | A minimalistic theme with no background annotations |
| theme_grey() | Theme with a light grey background and white gridlines |
| theme_bw() | A variation on theme_grey() that uses a white background and thin grey grid lines. |
| theme_void() | A completely empty theme. |
| theme_linedraw() | A theme with only black lines of various widths on white backgrounds, reminiscent of a line drawing. |
| theme_light() | similar to theme_linedraw() but with light grey lines and axes, to direct more attention towards the data. |
| theme_dark() | the dark cousin of theme_light(), with similar line sizes but a dark background. Useful to make thin coloured lines pop out. |

## Themes

### theme_classic

```{r}
ggplot(data = diamonds,
       mapping= aes(x=cut, fill=cut))+
  geom_bar() + 
  theme_classic()
```

### theme_void

```{r}
ggplot(data = diamonds, 
       mapping= aes(x=cut, fill=cut))+
  geom_bar() +
  theme_void()
```

### Save

``` r
ggsave(filename="plot/newplot.jpg")

# ?ggsave
```

## Labeling

```{r}
ggplot(data = demo) +
  geom_bar(mapping = aes(x=TRT, fill=RACE)) +
  labs(title = "Title: Treatment by Race", 
       subtitle = "Subtitle: goes here", 
       caption = "Caption: goes here", 
       tag = "Fig: I", 
       x = "Label: X-axis", 
       y = "Label: Y-axis", 
       fill = "Legend: Title") +
       theme_minimal()
```

## Your Turn 04

Using the dataset `dm`, create a bar chart with the following specifications:

-   X-axis: ARMCD (study arm codes)
-   Fill color: SEX (distribution)

Modify the plot to include these customizations:

-   Title: "Distribution of Sex by Treatment Group"
-   X-axis label: "Treatment Group"
-   Y-axis label: "Number of Participants"
-   Legend title: "Sex"
-   Theme: Apply theme_classic() for a clean look.

```{r}

ggplot(data = ...) +
  geom_bar(mapping = aes(x = ...., fill = ...)) +
  labs(
    title = "......",
    x = "......",
    y = "......",
    fill = "..."    # legend 
  ) + ..... # theme

```

## Other Geoms

### Types

| Types     | Description                                                    |
|-----------------------|-------------------------------------------------|
| Bar plot  | Distribution of a categorical variable.                        |
| Histogram | Distribution of a continuous variable.                         |
| Box plot  | Distribution of continuous variable with box and whisker plot. |

### Histograms

```{r}
ggplot(data = diamonds) +
   geom_histogram(aes(x = depth), binwidth = 0.5)
```

### Boxplot I

```{r}
ggplot(data = diamonds) +
  geom_boxplot(aes(y = depth))
```

### Boxplot II

```{r}
ggplot(data = diamonds) +
 geom_boxplot(aes(x = cut, y = depth))
```

## Your Turn 05

Using the `vs` dataset, create a boxplot to compare temperature (`TEMP`) distribution across different study visits (`VISIT`).

Modify the plot to include these customizations:

-   Title: "Distribution of Temperature by Visit"
-   X-axis label: "Study Visit"
-   Y-axis label: "Temperature (°C)"
-   Fill Color: Use "lightgreen" for all boxes.
-   Theme: Apply theme_classic() for a clean look.

```{r}

ggplot(data = ...., aes(x = ...., y = ....)) +
  geom_boxplot(
    fill = "...." # color
  ) +
  labs(
    title = "...",
    x = "....",
    y = "....."
  )  + theme_.....

```

## Facets

### About

Facets are used to create subplots from the whole plot using categorical variables. It is used to create subplots from a single categorical variable. It is used to create subplots on the combination of two categorical variables.

### Data

```{r}
head(blood)
```

### Plot

```{r}
ggplot(data = blood) +
  geom_point(
    mapping = aes(
      x = COUNT, y = SITEID,
      color = TYPES
    ),
    size = 4
  )
```

### Facet I

```{r}
ggplot(data = blood) +
  geom_point(
    mapping = aes(
      x = COUNT, y = SITEID,
      color = TYPES
    ),
    size = 4
  ) +
   facet_wrap(~TYPES, nrow = 2)
```

### Facet II

```{r}
ggplot(data = blood) +
  geom_point(
    mapping = aes(
      x = COUNT, y = SITEID,
      color = TYPES
    ),
    size = 4
  ) +
   facet_wrap(~TYPES, ncol = 1)
```

### Facet III

```{r}
ggplot(data = blood) +
  geom_point(
    mapping = aes(
      x = COUNT, y = SITEID,
      color = TYPES
    ),
    size = 4
  ) +
   facet_grid(TYPES ~ SEX)
```

### Facet IV

```{r}
ggplot(data = blood) +
  geom_point(
    mapping = aes(
      x = COUNT, y = SITEID,
      color = TYPES
    ),
    size = 4
  ) +
   facet_grid(SEX ~ TYPES)
```
